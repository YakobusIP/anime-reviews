generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Anime {
  id                String         @id @default(uuid())
  malId             Int            @unique
  type              String
  status            String
  rating            String
  season            String?
  title             String
  titleJapanese     String
  titleSynonyms     String
  source            String
  aired             String
  broadcast         String
  episodesCount     Int?
  duration          String
  score             Float?
  images            Json
  genres            Genre[]        @relation("AnimeGenres")
  studios           Studio[]
  themes            Theme[]        @relation("AnimeThemes")
  synopsis          String
  trailer           String?
  malUrl            String
  review            String?
  storylineRating   Int?
  qualityRating     Int?
  voiceActingRating Int?
  enjoymentRating   Int?
  personalScore     Int?
  reviewImages      ReviewImage[]  @relation("AnimeReviewImages")
  episodes          AnimeEpisode[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model AnimeEpisode {
  id            String  @id @default(uuid())
  aired         String
  number        Int
  title         String
  titleJapanese String?
  titleRomaji   String?
  anime         Anime   @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId       String
}

model Manga {
  id                     String        @id @default(uuid())
  malId                  Int           @unique
  status                 String
  title                  String
  titleJapanese          String
  titleSynonyms          String
  published              String
  chaptersCount          Int?
  volumesCount           Int?
  score                  Float?
  images                 Json
  authors                Author[]      @relation("MangaAuthors")
  genres                 Genre[]       @relation("MangaGenres")
  themes                 Theme[]       @relation("MangaThemes")
  synopsis               String
  malUrl                 String
  review                 String?
  storylineRating        Int?
  qualityRating          Int?
  characterizationRating Int?
  enjoymentRating        Int?
  personalScore          Int?
  reviewImages           ReviewImage[] @relation("MangaReviewImages")
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
}

model LightNovel {
  id                  String        @id @default(uuid())
  malId               Int           @unique
  status              String
  title               String
  titleJapanese       String
  titleSynonyms       String
  published           String
  chaptersCount       Int?
  volumesCount        Int?
  score               Float?
  images              Json
  authors             Author[]      @relation("LightNovelAuthors")
  genres              Genre[]       @relation("LightNovelGenres")
  themes              Theme[]       @relation("LightNovelThemes")
  synopsis            String
  malUrl              String
  review              String?
  storylineRating     Int?
  worldBuildingRating Int?
  illustrationRating  Int?
  enjoymentRating     Int?
  personalScore       Int?
  reviewImages        ReviewImage[] @relation("LightNovelReviewImages")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Genre {
  id         String       @id @default(uuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  anime      Anime[]      @relation("AnimeGenres")
  manga      Manga[]      @relation("MangaGenres")
  lightNovel LightNovel[] @relation("LightNovelGenres")
}

model Studio {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  anime     Anime[]
}

model Theme {
  id         String       @id @default(uuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  anime      Anime[]      @relation("AnimeThemes")
  manga      Manga[]      @relation("MangaThemes")
  lightNovel LightNovel[] @relation("LightNovelThemes")
}

model Author {
  id         String       @id @default(uuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  manga      Manga[]      @relation("MangaAuthors")
  lightNovel LightNovel[] @relation("LightNovelAuthors")
}

model AdminPin {
  id        String   @id @default(uuid())
  pin1      String
  pin2      String
  createdAt DateTime @default(now())
}

model ReviewImage {
  id        String   @id @default(uuid())
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  anime   Anime?  @relation("AnimeReviewImages", fields: [animeId], references: [id])
  animeId String?

  manga   Manga?  @relation("MangaReviewImages", fields: [mangaId], references: [id])
  mangaId String?

  lightNovel   LightNovel? @relation("LightNovelReviewImages", fields: [lightNovelId], references: [id])
  lightNovelId String?
}
